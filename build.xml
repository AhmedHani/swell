<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="build" name="SpectralLearning">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../../../../../Applications/eclipse"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
    <path id="SpectralLearning.classpath">
        <pathelement location="bin"/>
        <pathelement location="libs/Jama-1.0.2.jar"/>
        <pathelement location="libs/parallelcolt-0.9.4.jar"/>
        <pathelement location="libs/mtj-0.9.14.jar"/>
        <pathelement location="libs/Utils.jar"/>
        <pathelement location="libs/netlib-java-0.9.3.jar"/>
        <pathelement location="libs/netlib-java.jar"/>
        <pathelement location="libs/arpack_combined_all.jar"/>
        <pathelement location="libs/optimization.jar"/>
    </path>
    <path id="run.CCAVariants.bootclasspath">
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.CCAVariantsNGrams.bootclasspath">
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.ContextPCA.bootclasspath">
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.ContextPCANGrams.bootclasspath">
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.LRMVLEmbed.bootclasspath">
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.LSA.bootclasspath">
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="SpectralLearning.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="CCAVariants">
        <java classname="edu.upenn.cis.SpectralLearning.MainMethods.CCAVariants" failonerror="true" fork="yes">
            <jvmarg line="-Xmx4G"/>
            <arg line="unlab-train unlab-train-file:Input_Files/text_new.txt  train-file:Input_Files/train_demo.txt  scaleDictBySingVals vocab-size:2 hidden-state:2 algorithm:CCARunningText:2viewWvsR contextSizeEachSide:1"/>
            <classpath refid="SpectralLearning.classpath"/>
            <bootclasspath>
                <path refid="run.CCAVariants.bootclasspath"/>
            </bootclasspath>
        </java>
    </target>
    <target name="CCAVariantsNGrams">
        <java classname="edu.upenn.cis.SpectralLearning.MainMethods.CCAVariantsNGrams" failonerror="true" fork="yes">
            <jvmarg line="-Xmx4G"/>
            <arg line="unlab-train unlab-train-file:Input_Files/5grams.txt  scaleDictBySingVals  vocab-size:40 hidden-state:15 algorithm:CCANGram:TwoStepLRvsW num-grams:5"/>
            <classpath refid="SpectralLearning.classpath"/>
            <bootclasspath>
                <path refid="run.CCAVariantsNGrams.bootclasspath"/>
            </bootclasspath>
        </java>
    </target>
    <target name="ContextPCA">
        <java classname="edu.upenn.cis.SpectralLearning.MainMethods.ContextPCA" failonerror="true" fork="yes">
            <jvmarg line="-Xmx4G"/>
            <arg line="unlab-train unlab-train-file:Input_Files/train_demo1.txt  train-file:Input_Files/train_demo.txt  scaleDictBySingVals vocab-size:50 hidden-state:20 algorithm:ContextPCA:WvsLR contextSizeEachSide:2"/>
            <classpath refid="SpectralLearning.classpath"/>
            <bootclasspath>
                <path refid="run.ContextPCA.bootclasspath"/>
            </bootclasspath>
        </java>
    </target>
    <target name="ContextPCANGrams">
        <java classname="edu.upenn.cis.SpectralLearning.MainMethods.ContextPCANGrams" failonerror="true" fork="yes">
            <jvmarg line="-Xmx4g"/>
            <arg line="unlab-train unlab-train-file:Input_Files/3grams1.txt num-grams:3  scaleDictBySingVals vocab-size:3 hidden-state:3  algorithm:ContextPCANGrams:WvsR"/>
            <classpath refid="SpectralLearning.classpath"/>
            <bootclasspath>
                <path refid="run.ContextPCANGrams.bootclasspath"/>
            </bootclasspath>
        </java>
    </target>
    <target name="LRMVLEmbed">
        <java classname="edu.upenn.cis.SpectralLearning.MainMethods.LRMVLEmbed" failonerror="true" fork="yes">
            <jvmarg line="-Xmx4G"/>
            <arg line="train unlab-train test unlab-train-file:Input_Files/all.txt train-file:Input_Files/test_demo.txt test-file:Input_Files/test_demo.txt smooths:.1,.5,.9 doc-separator:DOCSTART-X-0 scaleDictBySingVals vocab-size:20 hidden-state:10 algorithm:LRMVL:2view  scaleDictBySingVals"/>
            <classpath refid="SpectralLearning.classpath"/>
            <bootclasspath>
                <path refid="run.LRMVLEmbed.bootclasspath"/>
            </bootclasspath>
        </java>
    </target>
    <target name="LSA">
        <java classname="edu.upenn.cis.SpectralLearning.MainMethods.LSA" failonerror="true" fork="yes">
            <jvmarg line="-Xmx4g"/>
            <arg line="unlab-train train unlab-train-file:Input_Files/train_demo1.txt  train-file:Input_Files/test_demo.txt doc-separator:DOCSTART-X-0 vocab-size:100 scaleDictBySingVals serialize-run-file:Output_Files/runLSA.ser eigen-dict-name:Output_Files/eigenFeatLSA.dict hidden-state:4 context-obl-embed-name:Output_Files/contextOblEmbedForTrainLSA.txt serialize-corpus-file:Output_Files/corpusLSA.ser"/>
            <classpath refid="SpectralLearning.classpath"/>
            <bootclasspath>
                <path refid="run.LSA.bootclasspath"/>
            </bootclasspath>
        </java>
    </target>
</project>
